name: main cd
on:
  push:
    branches:
      - main
env:
  BUILD_NUMBER: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
  TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  REGISTRY: us-east4-docker.pkg.dev
  PROJECT: dev-4ks
  ENVIRONMENT: dev
jobs:
  build:
    env:
      APP: api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set Env Vars
        run: |
          TAGS="${{ env.REGISTRY }}/${{ env.PROJECT }}/${{ env.APP }}/app:${{ env.BUILD_NUMBER }}, ${{ env.REGISTRY }}/${{ env.PROJECT }}/${{ env.APP }}/app:latest"
          echo "TAGS=$TAGS" >> $GITHUB_ENV
      # - name: Pull Latest Alpine Go
      #   run: docker pull golang:1.18-alpine
      - name: GCP Auth
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ env.PROJECT }}
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        # run: |
        #   gcloud auth configure-docker ${{ env.REGISTRY }} --quiet
        #   # echo ${{ env.GOOGLE_CREDENTIALS }} > ./gcloud-key.json
        #   # gcloud auth activate-service-account --key-file gcloud-key.json
        #   # gcloud config set project ${{ env.PROJECT }}
        #   # gcloud auth configure-docker
      - name: Build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./apps/${{ env.APP }}/Dockerfile
          push: false
          login: false
          tags: ${{ env.TAGS }}
          # cache-from: type=registry,ref=4ks/${{APP}}-ci:buildcache
          # cache-to: type=registry,ref=4ks/${{APP}}-ci:buildcache,mode=max
      - name: TAGS
        run: |
          docker images
          docker push "${{ env.REGISTRY }}/${{ env.PROJECT }}/${{ env.APP }}/app:${{ env.BUILD_NUMBER }}"
