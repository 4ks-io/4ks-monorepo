basePath: /api
definitions:
  dtos.CreateRecipe:
    properties:
      banner:
        items:
          $ref: '#/definitions/models.RecipeMediaVariant'
        type: array
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      instructions:
        items:
          $ref: '#/definitions/models.Instruction'
        type: array
      link:
        type: string
      name:
        type: string
    type: object
  dtos.CreateRecipeMedia:
    properties:
      filename:
        type: string
    required:
    - filename
    type: object
  dtos.CreateUser:
    properties:
      displayName:
        example: Bob Dylan
        type: string
      username:
        example: BobDylan
        type: string
    required:
    - displayName
    - username
    type: object
  dtos.TestUsernameRequest:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  dtos.TestUsernameResponse:
    properties:
      available:
        type: boolean
      msg:
        type: string
      username:
        type: string
      valid:
        type: boolean
    required:
    - available
    - msg
    - username
    - valid
    type: object
  dtos.UpdateRecipe:
    properties:
      banner:
        items:
          $ref: '#/definitions/models.RecipeMediaVariant'
        type: array
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      instructions:
        items:
          $ref: '#/definitions/models.Instruction'
        type: array
      link:
        type: string
      name:
        type: string
    type: object
  dtos.UpdateUser:
    properties:
      displayName:
        type: string
      username:
        type: string
    type: object
  models.CreateRecipeMedia:
    properties:
      recipeMedia:
        $ref: '#/definitions/models.RecipeMedia'
      signedUrl:
        type: string
    type: object
  models.Ingredient:
    properties:
      id:
        type: integer
      name:
        type: string
      quantity:
        type: string
      type:
        type: string
    type: object
  models.Instruction:
    properties:
      id:
        type: integer
      name:
        type: string
      text:
        type: string
      type:
        type: string
    type: object
  models.MediaBestUse:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - MediaBestUseGeneral
    - MediaBestUseIngredient
    - MediaBestUseInstruction
  models.MediaStatus:
    enum:
    - 0
    - 1
    - 2
    - 60
    - 61
    - 62
    - 63
    - 64
    - 65
    - 70
    - 71
    - 72
    - 73
    - 80
    - 81
    - 82
    type: integer
    x-enum-varnames:
    - MediaStatusRequested
    - MediaStatusProcessing
    - MediaStatusReady
    - MediaStatusErrorUnknown
    - MediaStatusErrorSize
    - MediaStatusErrorMissingAttr
    - MediaStatusErrorInvalidMIMEType
    - MediaStatusErrorVision
    - MediaStatusErrorSafeSearch
    - MediaStatusErrorInappropriateAdult
    - MediaStatusErrorInappropriateMedical
    - MediaStatusErrorInappropriateViolence
    - MediaStatusErrorInappropriateRacy
    - MediaStatusErrorFailedCopy
    - MediaStatusErrorFailedResize
    - MediaStatusErrorFailedVariant
  models.Recipe:
    properties:
      author:
        $ref: '#/definitions/models.UserSummary'
      branch:
        type: string
      contributors:
        items:
          $ref: '#/definitions/models.UserSummary'
        type: array
      createdDate:
        type: string
      currentRevision:
        $ref: '#/definitions/models.RecipeRevision'
      id:
        type: string
      metadata:
        $ref: '#/definitions/models.RecipeMetadata'
      root:
        type: string
      updatedDate:
        type: string
    type: object
  models.RecipeMedia:
    properties:
      bestUse:
        $ref: '#/definitions/models.MediaBestUse'
      contentType:
        type: string
      createdDate:
        type: string
      id:
        type: string
      ownerId:
        type: string
      recipeId:
        type: string
      rootRecipeId:
        type: string
      status:
        $ref: '#/definitions/models.MediaStatus'
      updatedDate:
        type: string
      variants:
        items:
          $ref: '#/definitions/models.RecipeMediaVariant'
        type: array
    type: object
  models.RecipeMediaVariant:
    properties:
      alias:
        type: string
      filename:
        type: string
      maxWidth:
        type: integer
      url:
        type: string
    type: object
  models.RecipeMetadata:
    properties:
      forks:
        type: integer
      stars:
        type: integer
    type: object
  models.RecipeRevision:
    properties:
      author:
        $ref: '#/definitions/models.UserSummary'
      banner:
        items:
          $ref: '#/definitions/models.RecipeMediaVariant'
        type: array
      createdDate:
        type: string
      id:
        type: string
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      instructions:
        items:
          $ref: '#/definitions/models.Instruction'
        type: array
      link:
        type: string
      name:
        type: string
      recipeId:
        type: string
      updatedDate:
        type: string
    type: object
  models.User:
    properties:
      createdDate:
        type: string
      displayName:
        type: string
      emailAddress:
        type: string
      id:
        type: string
      updatedDate:
        type: string
      username:
        type: string
      usernameLower:
        type: string
    type: object
  models.UserExist:
    properties:
      exist:
        type: boolean
    required:
    - exist
    type: object
  models.UserSummary:
    properties:
      displayName:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is the 4ks api
  title: 4ks API
  version: "1.0"
paths:
  /_admin/recipes:
    post:
      consumes:
      - application/json
      description: Bot Create a new Recipe
      parameters:
      - description: Recipe Data
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateRecipe'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
      security:
      - ApiKeyAuth: []
      summary: Bot Create a new Recipe
      tags:
      - Admin
  /_admin/recipes/{recipeID}/media:
    get:
      consumes:
      - application/json
      description: Get all medias for a Recipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RecipeMedia'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all medias for a Recipe
      tags:
      - Admin
  /healthcheck:
    get:
      consumes:
      - application/json
      description: healthcheck
      produces:
      - application/json
      responses: {}
      summary: healthcheck
      tags:
      - System
  /ready:
    get:
      consumes:
      - application/json
      description: Check system readiness by probing downstream services such as the
        database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Checks Readiness
      tags:
      - System
  /recipes:
    get:
      consumes:
      - application/json
      description: Get All Recipes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Recipe'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get All Recipes
      tags:
      - Recipes
    post:
      consumes:
      - application/json
      description: Create a new Recipe
      parameters:
      - description: Recipe Data
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateRecipe'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
      security:
      - ApiKeyAuth: []
      summary: Create a new Recipe
      tags:
      - Recipes
  /recipes/{recipeID}:
    delete:
      consumes:
      - application/json
      description: Delete Recipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete Recipe
      tags:
      - Recipes
    get:
      consumes:
      - application/json
      description: Get a Recipe (by ID)
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
      security:
      - ApiKeyAuth: []
      summary: Get a Recipe (by ID)
      tags:
      - Recipes
    patch:
      consumes:
      - application/json
      description: Update Recipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      - description: Recipe Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateRecipe'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
      security:
      - ApiKeyAuth: []
      summary: Update Recipe
      tags:
      - Recipes
  /recipes/{recipeID}/fork:
    post:
      consumes:
      - application/json
      description: Fork Recipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
      security:
      - ApiKeyAuth: []
      summary: Fork Recipe
      tags:
      - Recipes
  /recipes/{recipeID}/media:
    get:
      consumes:
      - application/json
      description: Get all medias for a Recipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RecipeMedia'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all medias for a Recipe
      tags:
      - Recipes
    post:
      consumes:
      - application/json
      description: Create a new Media SignedURL
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateRecipeMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateRecipeMedia'
      security:
      - ApiKeyAuth: []
      summary: Create a new Media SignedURL
      tags:
      - Recipes
  /recipes/{recipeID}/revisions:
    get:
      consumes:
      - application/json
      description: Get all revisions for a Recipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RecipeRevision'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all revisions for a Recipe
      tags:
      - Recipes
  /recipes/{recipeID}/star:
    post:
      consumes:
      - application/json
      description: Star Recipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipeID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Star Recipe
      tags:
      - Recipes
  /recipes/author/{username}:
    get:
      consumes:
      - application/json
      description: Get All Recipes by Author
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Recipe'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get All Recipes by Author
      tags:
      - Recipes
  /recipes/revisions/{revisionID}:
    get:
      consumes:
      - application/json
      description: Get a Revision By ID
      parameters:
      - description: Revision ID
        in: path
        name: revisionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RecipeRevision'
      security:
      - ApiKeyAuth: []
      summary: Get a Recipe Revision
      tags:
      - Recipes
  /search/init/recipe-collection:
    post:
      consumes:
      - application/json
      description: Initialize Search Recipe Collection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Initialize Search Recipe Collection
      tags:
      - Search
  /user:
    get:
      consumes:
      - application/json
      description: Get Current User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Get Current User
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new User
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Create a new User
      tags:
      - Users
  /user/:
    head:
      description: Head Authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Invalid Request
        "404":
          description: Record Not Found
        "500":
          description: Internal Error
      security:
      - ApiKeyAuth: []
      summary: Head Authenticated user
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: User Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Update User
      tags:
      - Users
  /users/:
    get:
      consumes:
      - application/json
      description: Get All Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get All Users
      tags:
      - Users
  /users/{userID}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete User
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a User (by ID)
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Get a User (by ID)
      tags:
      - Users
  /users/exist:
    get:
      description: Get Current User Exist
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserExist'
      security:
      - ApiKeyAuth: []
      summary: Get Current User Exist
      tags:
      - Users
  /users/username:
    post:
      consumes:
      - application/json
      description: Returns username validity and availability
      parameters:
      - description: Username Data
        in: body
        name: username
        required: true
        schema:
          $ref: '#/definitions/dtos.TestUsernameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TestUsernameResponse'
      security:
      - ApiKeyAuth: []
      summary: Returns username validity and availability
      tags:
      - Users
  /version:
    get:
      consumes:
      - application/json
      description: Get API Version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get API Version
      tags:
      - System
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
